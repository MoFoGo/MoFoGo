/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, TestEntity1 } from "@prisma/client";

export class TestEntity1ServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.TestEntity1FindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestEntity1FindManyArgs>
  ): Promise<number> {
    return this.prisma.testEntity1.count(args);
  }

  async findMany<T extends Prisma.TestEntity1FindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestEntity1FindManyArgs>
  ): Promise<TestEntity1[]> {
    return this.prisma.testEntity1.findMany(args);
  }
  async findOne<T extends Prisma.TestEntity1FindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestEntity1FindUniqueArgs>
  ): Promise<TestEntity1 | null> {
    return this.prisma.testEntity1.findUnique(args);
  }
  async create<T extends Prisma.TestEntity1CreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestEntity1CreateArgs>
  ): Promise<TestEntity1> {
    return this.prisma.testEntity1.create<T>(args);
  }
  async update<T extends Prisma.TestEntity1UpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestEntity1UpdateArgs>
  ): Promise<TestEntity1> {
    return this.prisma.testEntity1.update<T>(args);
  }
  async delete<T extends Prisma.TestEntity1DeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestEntity1DeleteArgs>
  ): Promise<TestEntity1> {
    return this.prisma.testEntity1.delete(args);
  }
}
